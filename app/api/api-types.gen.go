// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Gender.
const (
	Female Gender = "female"
	Male   Gender = "male"
)

// Defines values for MenuLabel.
const (
	AFTERNOONSNACK MenuLabel = "AFTERNOON_SNACK"
	BREAKFAST      MenuLabel = "BREAKFAST"
	DINNER         MenuLabel = "DINNER"
	LUNCH          MenuLabel = "LUNCH"
	MORNINGSNACK   MenuLabel = "MORNING_SNACK"
)

// Defines values for Unit.
const (
	G  Unit = "g"
	G1 Unit = "G"
	KG Unit = "KG"
	Kg Unit = "kg"
	L  Unit = "l"
	L1 Unit = "L"
)

// ID defines model for ID.
type ID = openapi_types.UUID

// ConstraintsViolation It represents a constraints violation error
type ConstraintsViolation struct {
	// Field The field that is causing the constraints violation
	Field string `json:"field"`

	// Message The human-readable constraints violation description
	Message string `json:"message"`
}

// ConstraintsViolationsError Note: It follows [RFC-7807](https://tools.ietf.org/html/rfc7807#page-9) **proposed** standard
//
// Error object returned on any failure. It can be extended to add more params
type ConstraintsViolationsError = Error

// DailyMenu A daily menu
type DailyMenu struct {
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`

	// Name Name of a daily menu
	Name string `json:"name"`
}

// DailyMenuDetailed An ingredient
type DailyMenuDetailed struct {
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`

	// Menus List of menus.
	Menus MenusDetailed `json:"menus"`

	// Name Name of a daily menu
	Name string `json:"name"`

	// NutritionFactsTotal Nutrition facts of a meal
	NutritionFactsTotal *NutritionFacts `json:"nutrition_facts_total,omitempty"`
}

// DailyMenus List of daily menus.
type DailyMenus = []DailyMenu

// DailyMenusDetailed List of daily menus.
type DailyMenusDetailed = []DailyMenuDetailed

// DailyValues Recommended Daily Values
type DailyValues struct {
	// Caffeine Caffeine DV (%)
	Caffeine *float32 `json:"caffeine,omitempty"`

	// Calcium Calcium DV (%)
	Calcium *float32 `json:"calcium,omitempty"`

	// CarbohydrateSugar Sugar Carbohydrates DV (%)
	CarbohydrateSugar *float32 `json:"carbohydrate_sugar,omitempty"`

	// CarbohydrateTotal Total Carbohydrates DV (%)
	CarbohydrateTotal *float32 `json:"carbohydrate_total,omitempty"`

	// Cholesterol Cholesterol DV (%)
	Cholesterol *float32 `json:"cholesterol,omitempty"`

	// FatSaturated Saturated fats DV (%)
	FatSaturated *float32 `json:"fat_saturated,omitempty"`

	// Fiber Fiber DV (%)
	Fiber *float32 `json:"fiber,omitempty"`

	// Iron Iron DV (%)
	Iron *float32 `json:"iron,omitempty"`

	// Potassium Potassium DV (%)
	Potassium *float32 `json:"potassium,omitempty"`

	// Protein Proteins DV (%)
	Protein *float32 `json:"protein,omitempty"`

	// Salt Salt DV (%)
	Salt *float32 `json:"salt,omitempty"`

	// Sodium Sodium DV (%)
	Sodium *float32 `json:"sodium,omitempty"`

	// VitaminA Vitamin A DV (%)
	VitaminA *float32 `json:"vitamin_a,omitempty"`

	// VitaminB1 Vitamin B1 DV (%)
	VitaminB1 *float32 `json:"vitamin_b1,omitempty"`

	// VitaminB12 Vitamin B12 DV (%)
	VitaminB12 *float32 `json:"vitamin_b12,omitempty"`

	// VitaminB2 Vitamin B2 DV (%)
	VitaminB2 *float32 `json:"vitamin_b2,omitempty"`

	// VitaminB3 Vitamin B3 DV (%)
	VitaminB3 *float32 `json:"vitamin_b3,omitempty"`

	// VitaminB4 Vitamin B4 DV (%)
	VitaminB4 *float32 `json:"vitamin_b4,omitempty"`

	// VitaminB5 Vitamin B5 DV (%)
	VitaminB5 *float32 `json:"vitamin_b5,omitempty"`

	// VitaminB6 Vitamin B6 DV (%)
	VitaminB6 *float32 `json:"vitamin_b6,omitempty"`

	// VitaminC Vitamin C DV (%)
	VitaminC *float32 `json:"vitamin_c,omitempty"`

	// VitaminD Vitamin D DV (%)
	VitaminD *float32 `json:"vitamin_d,omitempty"`

	// VitaminE Vitamin E DV (%)
	VitaminE *float32 `json:"vitamin_e,omitempty"`

	// VitaminK Vitamin K DV (%)
	VitaminK *float32 `json:"vitamin_k,omitempty"`
}

// Error Note: It follows [RFC-7807](https://tools.ietf.org/html/rfc7807#page-9) **proposed** standard
//
// Error object returned on any failure. It can be extended to add more params
type Error struct {
	// Detail A human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type
	Title string `json:"title"`
}

// Gender User gender.
type Gender string

// Ingredient An ingredient
type Ingredient struct {
	// Product A product
	Product Product `json:"product"`

	// Quantity Product quantity
	Quantity float32 `json:"quantity"`
}

// Menu A menu
type Menu struct {
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`

	// Label Menu label.
	Label MenuLabel `json:"label"`

	// Name Name of a menu
	Name string `json:"name"`
}

// MenuDetailed An ingredient
type MenuDetailed struct {
	Uuid        *openapi_types.UUID `json:"uuid,omitempty"`
	Ingredients *[]Ingredient       `json:"ingredients,omitempty"`

	// Label Menu label.
	Label MenuLabel `json:"label"`

	// Name Name of a menu
	Name string `json:"name"`

	// NutritionFactsTotal Nutrition facts of a meal
	NutritionFactsTotal *NutritionFacts `json:"nutrition_facts_total,omitempty"`
	Recipes             *[]Recipe       `json:"recipes,omitempty"`
}

// MenuLabel Menu label.
type MenuLabel string

// Menus List of menus.
type Menus = []Menu

// MenusDetailed List of menus.
type MenusDetailed = []MenuDetailed

// NutritionFacts Nutrition facts of a meal
type NutritionFacts struct {
	// Caffeine Caffeine (g)
	Caffeine *float32 `json:"caffeine,omitempty"`

	// Cal Calories (cal)
	Cal float32 `json:"cal"`

	// Calcium Calcium (g)
	Calcium *float32 `json:"calcium,omitempty"`

	// CarbohydrateSugar Sugar Carbohydrates (g)
	CarbohydrateSugar *float32 `json:"carbohydrate_sugar,omitempty"`

	// CarbohydrateTotal Total Carbohydrates (g)
	CarbohydrateTotal *float32 `json:"carbohydrate_total,omitempty"`

	// Cholesterol Cholesterol (g)
	Cholesterol *float32 `json:"cholesterol,omitempty"`

	// FatMonounsaturated Monounsaturated fats (g)
	FatMonounsaturated *float32 `json:"fat_monounsaturated,omitempty"`

	// FatPolyunsaturated Polyunsaturated fats (g)
	FatPolyunsaturated *float32 `json:"fat_polyunsaturated,omitempty"`

	// FatSaturated Saturated fats (g)
	FatSaturated *float32 `json:"fat_saturated,omitempty"`

	// FatTotal Total fats (g)
	FatTotal *float32 `json:"fat_total,omitempty"`

	// Fiber Fiber (g)
	Fiber *float32 `json:"fiber,omitempty"`

	// Iron Iron (g)
	Iron *float32 `json:"iron,omitempty"`

	// Potassium Potassium (g)
	Potassium *float32 `json:"potassium,omitempty"`

	// Protein Proteins (g)
	Protein *float32 `json:"protein,omitempty"`

	// Salt Salt (g)
	Salt *float32 `json:"salt,omitempty"`

	// Sodium Sodium (g)
	Sodium *float32 `json:"sodium,omitempty"`

	// VitaminA Vitamin A (g)
	VitaminA *float32 `json:"vitamin_a,omitempty"`

	// VitaminB1 Vitamin B1 (g)
	VitaminB1 *float32 `json:"vitamin_b1,omitempty"`

	// VitaminB12 Vitamin B12 (g)
	VitaminB12 *float32 `json:"vitamin_b12,omitempty"`

	// VitaminB2 Vitamin B2 (g)
	VitaminB2 *float32 `json:"vitamin_b2,omitempty"`

	// VitaminB3 Vitamin B3 (g)
	VitaminB3 *float32 `json:"vitamin_b3,omitempty"`

	// VitaminB4 Vitamin B4 (g)
	VitaminB4 *float32 `json:"vitamin_b4,omitempty"`

	// VitaminB5 Vitamin B5 (g)
	VitaminB5 *float32 `json:"vitamin_b5,omitempty"`

	// VitaminB6 Vitamin B6 (g)
	VitaminB6 *float32 `json:"vitamin_b6,omitempty"`

	// VitaminC Vitamin C (g)
	VitaminC *float32 `json:"vitamin_c,omitempty"`

	// VitaminD Vitamin D (g)
	VitaminD *float32 `json:"vitamin_d,omitempty"`

	// VitaminE Vitamin E (g)
	VitaminE *float32 `json:"vitamin_e,omitempty"`

	// VitaminK Vitamin K (g)
	VitaminK *float32 `json:"vitamin_k,omitempty"`
}

// Price A price
type Price struct {
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`

	// Price Price of an item
	Price float32 `json:"price"`

	// Quantity Quantity that the price is associated to (based on the item's unit)
	Quantity float32 `json:"quantity"`
}

// Product defines model for Product.
type Product struct {
	Uuid *ID `json:"uuid,omitempty"`

	// CurrentPrice A price
	CurrentPrice *Price `json:"current_price,omitempty"`

	// DisplayNameLangEnUs Display name of a product in en-US language
	DisplayNameLangEnUs *string `json:"display_name_lang_en_us,omitempty"`

	// DisplayNameLangEsEs Display name of a product in es-ES language
	DisplayNameLangEsEs *string `json:"display_name_lang_es_es,omitempty"`

	// NutritionFacts100 Nutrition facts of a meal
	NutritionFacts100 NutritionFacts `json:"nutrition_facts_100"`

	// Slug Slug of a product
	Slug string `json:"slug"`

	// Unit Measure unit.
	Unit Unit `json:"unit"`

	// Vendors Vendors of a product
	Vendors *[]string `json:"vendors,omitempty"`
}

// ProductID defines model for ProductID.
type ProductID struct {
	Uuid *ID `json:"uuid,omitempty"`
}

// ProductProperties defines model for ProductProperties.
type ProductProperties struct {
	// CurrentPrice A price
	CurrentPrice *Price `json:"current_price,omitempty"`

	// DisplayNameLangEnUs Display name of a product in en-US language
	DisplayNameLangEnUs *string `json:"display_name_lang_en_us,omitempty"`

	// DisplayNameLangEsEs Display name of a product in es-ES language
	DisplayNameLangEsEs *string `json:"display_name_lang_es_es,omitempty"`

	// NutritionFacts100 Nutrition facts of a meal
	NutritionFacts100 *NutritionFacts `json:"nutrition_facts_100,omitempty"`

	// Slug Slug of a product
	Slug *string `json:"slug,omitempty"`

	// Unit Measure unit.
	Unit *Unit `json:"unit,omitempty"`

	// Vendors Vendors of a product
	Vendors *[]string `json:"vendors,omitempty"`
}

// ProductRequiredProperties defines model for ProductRequiredProperties.
type ProductRequiredProperties = map[string]interface{}

// Recipe defines model for Recipe.
type Recipe struct {
	Uuid        *ID          `json:"uuid,omitempty"`
	Ingredients []Ingredient `json:"ingredients"`

	// Name Name of a recipe
	Name string `json:"name"`

	// NutritionFacts100 Nutrition facts of a meal
	NutritionFacts100 *NutritionFacts `json:"nutrition_facts_100,omitempty"`

	// NutritionFactsTotal Nutrition facts of a meal
	NutritionFactsTotal *NutritionFacts `json:"nutrition_facts_total,omitempty"`

	// Quantity Total quantity
	Quantity *float32 `json:"quantity,omitempty"`
}

// RecipeID defines model for RecipeID.
type RecipeID struct {
	Uuid *ID `json:"uuid,omitempty"`
}

// RecipeProperties defines model for RecipeProperties.
type RecipeProperties struct {
	Ingredients *[]Ingredient `json:"ingredients,omitempty"`

	// Name Name of a recipe
	Name *string `json:"name,omitempty"`

	// NutritionFacts100 Nutrition facts of a meal
	NutritionFacts100 *NutritionFacts `json:"nutrition_facts_100,omitempty"`

	// NutritionFactsTotal Nutrition facts of a meal
	NutritionFactsTotal *NutritionFacts `json:"nutrition_facts_total,omitempty"`

	// Quantity Total quantity
	Quantity *float32 `json:"quantity,omitempty"`
}

// RecipeRequiredProperties defines model for RecipeRequiredProperties.
type RecipeRequiredProperties = map[string]interface{}

// Unit Measure unit.
type Unit string

// User A user
type User struct {
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`

	// Birthday Birthday of a user
	Birthday openapi_types.Date `json:"birthday"`

	// BmrMifflinStJeor Basal Metabolism Rate according to the Mifflin-St Jeor equation
	BmrMifflinStJeor *float32 `json:"bmr_mifflin_st_jeor,omitempty"`

	// BmrRevisedHarrisBenedict Basal Metabolism Rate according to the revised Harris Benedict equation
	BmrRevisedHarrisBenedict *float32 `json:"bmr_revised_harris_benedict,omitempty"`

	// Email Email of a user
	Email string `json:"email"`

	// Gender Email of a user
	Gender string `json:"gender"`

	// Height Height of a user
	Height float32 `json:"height"`

	// Name Name of a user
	Name string `json:"name"`

	// Weight Weight of a user
	Weight float32 `json:"weight"`
}

// Users List of users.
type Users = []User

// ParamDailyMenuID defines model for ParamDailyMenuID.
type ParamDailyMenuID = ID

// ParamMenuID defines model for ParamMenuID.
type ParamMenuID = ID

// ParamProductID defines model for ParamProductID.
type ParamProductID = ID

// ParamRecipeID defines model for ParamRecipeID.
type ParamRecipeID = ID

// ParamUserID defines model for ParamUserID.
type ParamUserID = ID

// CreateProduct defines model for CreateProduct.
type CreateProduct struct {
	// CurrentPrice A price
	CurrentPrice *Price `json:"current_price,omitempty"`

	// DisplayNameLangEnUs Display name of a product in en-US language
	DisplayNameLangEnUs *string `json:"display_name_lang_en_us,omitempty"`

	// DisplayNameLangEsEs Display name of a product in es-ES language
	DisplayNameLangEsEs *string `json:"display_name_lang_es_es,omitempty"`

	// NutritionFacts100 Nutrition facts of a meal
	NutritionFacts100 NutritionFacts `json:"nutrition_facts_100"`

	// Slug Slug of a product
	Slug string `json:"slug"`

	// Unit Measure unit.
	Unit Unit `json:"unit"`

	// Vendors Vendors of a product
	Vendors *[]string `json:"vendors,omitempty"`
}

// CreateRecipe defines model for CreateRecipe.
type CreateRecipe struct {
	Ingredients []Ingredient `json:"ingredients"`

	// Name Name of a recipe
	Name string `json:"name"`

	// NutritionFacts100 Nutrition facts of a meal
	NutritionFacts100 *NutritionFacts `json:"nutrition_facts_100,omitempty"`

	// NutritionFactsTotal Nutrition facts of a meal
	NutritionFactsTotal *NutritionFacts `json:"nutrition_facts_total,omitempty"`

	// Quantity Total quantity
	Quantity *float32 `json:"quantity,omitempty"`
}

// PostProductsJSONBody defines parameters for PostProducts.
type PostProductsJSONBody struct {
	// CurrentPrice A price
	CurrentPrice *Price `json:"current_price,omitempty"`

	// DisplayNameLangEnUs Display name of a product in en-US language
	DisplayNameLangEnUs *string `json:"display_name_lang_en_us,omitempty"`

	// DisplayNameLangEsEs Display name of a product in es-ES language
	DisplayNameLangEsEs *string `json:"display_name_lang_es_es,omitempty"`

	// NutritionFacts100 Nutrition facts of a meal
	NutritionFacts100 NutritionFacts `json:"nutrition_facts_100"`

	// Slug Slug of a product
	Slug string `json:"slug"`

	// Unit Measure unit.
	Unit Unit `json:"unit"`

	// Vendors Vendors of a product
	Vendors *[]string `json:"vendors,omitempty"`
}

// PostUsersParamUserIDRecipesJSONBody defines parameters for PostUsersParamUserIDRecipes.
type PostUsersParamUserIDRecipesJSONBody struct {
	Ingredients []Ingredient `json:"ingredients"`

	// Name Name of a recipe
	Name string `json:"name"`

	// NutritionFacts100 Nutrition facts of a meal
	NutritionFacts100 *NutritionFacts `json:"nutrition_facts_100,omitempty"`

	// NutritionFactsTotal Nutrition facts of a meal
	NutritionFactsTotal *NutritionFacts `json:"nutrition_facts_total,omitempty"`

	// Quantity Total quantity
	Quantity *float32 `json:"quantity,omitempty"`
}

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody PostProductsJSONBody

// PostUsersParamUserIDRecipesJSONRequestBody defines body for PostUsersParamUserIDRecipes for application/json ContentType.
type PostUsersParamUserIDRecipesJSONRequestBody PostUsersParamUserIDRecipesJSONBody

// PatchUsersParamUserIDRecipesParamRecipeIDJSONRequestBody defines body for PatchUsersParamUserIDRecipesParamRecipeID for application/json ContentType.
type PatchUsersParamUserIDRecipesParamRecipeIDJSONRequestBody = RecipeProperties
