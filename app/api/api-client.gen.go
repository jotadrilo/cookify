// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdminUsers request
	GetAdminUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProducts request
	GetProducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsWithBody request with any body
	PostProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProducts(ctx context.Context, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsParamProductID request
	GetProductsParamProductID(ctx context.Context, paramProductID ParamProductID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsParamProductIDEquivalents request
	GetProductsParamProductIDEquivalents(ctx context.Context, paramProductID ParamProductID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersParamUserID request
	GetUsersParamUserID(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersParamUserIDDailyMenus request
	GetUsersParamUserIDDailyMenus(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersParamUserIDDailyMenusParamDailyMenuID request
	GetUsersParamUserIDDailyMenusParamDailyMenuID(ctx context.Context, paramUserID ParamUserID, paramDailyMenuID ParamDailyMenuID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersParamUserIDMenus request
	GetUsersParamUserIDMenus(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersParamUserIDMenusParamMenuID request
	GetUsersParamUserIDMenusParamMenuID(ctx context.Context, paramUserID ParamUserID, paramMenuID ParamMenuID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersParamUserIDRecipes request
	GetUsersParamUserIDRecipes(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersParamUserIDRecipesWithBody request with any body
	PostUsersParamUserIDRecipesWithBody(ctx context.Context, paramUserID ParamUserID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersParamUserIDRecipes(ctx context.Context, paramUserID ParamUserID, body PostUsersParamUserIDRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersParamUserIDRecipesParamRecipeID request
	GetUsersParamUserIDRecipesParamRecipeID(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUsersParamUserIDRecipesParamRecipeIDWithBody request with any body
	PatchUsersParamUserIDRecipesParamRecipeIDWithBody(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUsersParamUserIDRecipesParamRecipeID(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, body PatchUsersParamUserIDRecipesParamRecipeIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAdminUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProducts(ctx context.Context, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsParamProductID(ctx context.Context, paramProductID ParamProductID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsParamProductIDRequest(c.Server, paramProductID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsParamProductIDEquivalents(ctx context.Context, paramProductID ParamProductID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsParamProductIDEquivalentsRequest(c.Server, paramProductID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersParamUserID(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersParamUserIDRequest(c.Server, paramUserID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersParamUserIDDailyMenus(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersParamUserIDDailyMenusRequest(c.Server, paramUserID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersParamUserIDDailyMenusParamDailyMenuID(ctx context.Context, paramUserID ParamUserID, paramDailyMenuID ParamDailyMenuID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersParamUserIDDailyMenusParamDailyMenuIDRequest(c.Server, paramUserID, paramDailyMenuID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersParamUserIDMenus(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersParamUserIDMenusRequest(c.Server, paramUserID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersParamUserIDMenusParamMenuID(ctx context.Context, paramUserID ParamUserID, paramMenuID ParamMenuID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersParamUserIDMenusParamMenuIDRequest(c.Server, paramUserID, paramMenuID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersParamUserIDRecipes(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersParamUserIDRecipesRequest(c.Server, paramUserID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersParamUserIDRecipesWithBody(ctx context.Context, paramUserID ParamUserID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersParamUserIDRecipesRequestWithBody(c.Server, paramUserID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersParamUserIDRecipes(ctx context.Context, paramUserID ParamUserID, body PostUsersParamUserIDRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersParamUserIDRecipesRequest(c.Server, paramUserID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersParamUserIDRecipesParamRecipeID(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersParamUserIDRecipesParamRecipeIDRequest(c.Server, paramUserID, paramRecipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersParamUserIDRecipesParamRecipeIDWithBody(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersParamUserIDRecipesParamRecipeIDRequestWithBody(c.Server, paramUserID, paramRecipeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersParamUserIDRecipesParamRecipeID(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, body PatchUsersParamUserIDRecipesParamRecipeIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersParamUserIDRecipesParamRecipeIDRequest(c.Server, paramUserID, paramRecipeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdminUsersRequest generates requests for GetAdminUsers
func NewGetAdminUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsRequest generates requests for GetProducts
func NewGetProductsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProductsRequest calls the generic PostProducts builder with application/json body
func NewPostProductsRequest(server string, body PostProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProductsRequestWithBody generates requests for PostProducts with any type of body
func NewPostProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsParamProductIDRequest generates requests for GetProductsParamProductID
func NewGetProductsParamProductIDRequest(server string, paramProductID ParamProductID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamProductID", runtime.ParamLocationPath, paramProductID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsParamProductIDEquivalentsRequest generates requests for GetProductsParamProductIDEquivalents
func NewGetProductsParamProductIDEquivalentsRequest(server string, paramProductID ParamProductID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamProductID", runtime.ParamLocationPath, paramProductID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/equivalents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersParamUserIDRequest generates requests for GetUsersParamUserID
func NewGetUsersParamUserIDRequest(server string, paramUserID ParamUserID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamUserID", runtime.ParamLocationPath, paramUserID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersParamUserIDDailyMenusRequest generates requests for GetUsersParamUserIDDailyMenus
func NewGetUsersParamUserIDDailyMenusRequest(server string, paramUserID ParamUserID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamUserID", runtime.ParamLocationPath, paramUserID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/daily-menus", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersParamUserIDDailyMenusParamDailyMenuIDRequest generates requests for GetUsersParamUserIDDailyMenusParamDailyMenuID
func NewGetUsersParamUserIDDailyMenusParamDailyMenuIDRequest(server string, paramUserID ParamUserID, paramDailyMenuID ParamDailyMenuID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamUserID", runtime.ParamLocationPath, paramUserID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ParamDailyMenuID", runtime.ParamLocationPath, paramDailyMenuID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/daily-menus/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersParamUserIDMenusRequest generates requests for GetUsersParamUserIDMenus
func NewGetUsersParamUserIDMenusRequest(server string, paramUserID ParamUserID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamUserID", runtime.ParamLocationPath, paramUserID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/menus", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersParamUserIDMenusParamMenuIDRequest generates requests for GetUsersParamUserIDMenusParamMenuID
func NewGetUsersParamUserIDMenusParamMenuIDRequest(server string, paramUserID ParamUserID, paramMenuID ParamMenuID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamUserID", runtime.ParamLocationPath, paramUserID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ParamMenuID", runtime.ParamLocationPath, paramMenuID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/menus/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersParamUserIDRecipesRequest generates requests for GetUsersParamUserIDRecipes
func NewGetUsersParamUserIDRecipesRequest(server string, paramUserID ParamUserID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamUserID", runtime.ParamLocationPath, paramUserID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/recipes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersParamUserIDRecipesRequest calls the generic PostUsersParamUserIDRecipes builder with application/json body
func NewPostUsersParamUserIDRecipesRequest(server string, paramUserID ParamUserID, body PostUsersParamUserIDRecipesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersParamUserIDRecipesRequestWithBody(server, paramUserID, "application/json", bodyReader)
}

// NewPostUsersParamUserIDRecipesRequestWithBody generates requests for PostUsersParamUserIDRecipes with any type of body
func NewPostUsersParamUserIDRecipesRequestWithBody(server string, paramUserID ParamUserID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamUserID", runtime.ParamLocationPath, paramUserID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/recipes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersParamUserIDRecipesParamRecipeIDRequest generates requests for GetUsersParamUserIDRecipesParamRecipeID
func NewGetUsersParamUserIDRecipesParamRecipeIDRequest(server string, paramUserID ParamUserID, paramRecipeID ParamRecipeID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamUserID", runtime.ParamLocationPath, paramUserID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ParamRecipeID", runtime.ParamLocationPath, paramRecipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/recipes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUsersParamUserIDRecipesParamRecipeIDRequest calls the generic PatchUsersParamUserIDRecipesParamRecipeID builder with application/json body
func NewPatchUsersParamUserIDRecipesParamRecipeIDRequest(server string, paramUserID ParamUserID, paramRecipeID ParamRecipeID, body PatchUsersParamUserIDRecipesParamRecipeIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUsersParamUserIDRecipesParamRecipeIDRequestWithBody(server, paramUserID, paramRecipeID, "application/json", bodyReader)
}

// NewPatchUsersParamUserIDRecipesParamRecipeIDRequestWithBody generates requests for PatchUsersParamUserIDRecipesParamRecipeID with any type of body
func NewPatchUsersParamUserIDRecipesParamRecipeIDRequestWithBody(server string, paramUserID ParamUserID, paramRecipeID ParamRecipeID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ParamUserID", runtime.ParamLocationPath, paramUserID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ParamRecipeID", runtime.ParamLocationPath, paramRecipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/recipes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdminUsersWithResponse request
	GetAdminUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminUsersResponse, error)

	// GetProductsWithResponse request
	GetProductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	// PostProductsWithBodyWithResponse request with any body
	PostProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsResponse, error)

	PostProductsWithResponse(ctx context.Context, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsResponse, error)

	// GetProductsParamProductIDWithResponse request
	GetProductsParamProductIDWithResponse(ctx context.Context, paramProductID ParamProductID, reqEditors ...RequestEditorFn) (*GetProductsParamProductIDResponse, error)

	// GetProductsParamProductIDEquivalentsWithResponse request
	GetProductsParamProductIDEquivalentsWithResponse(ctx context.Context, paramProductID ParamProductID, reqEditors ...RequestEditorFn) (*GetProductsParamProductIDEquivalentsResponse, error)

	// GetUsersParamUserIDWithResponse request
	GetUsersParamUserIDWithResponse(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDResponse, error)

	// GetUsersParamUserIDDailyMenusWithResponse request
	GetUsersParamUserIDDailyMenusWithResponse(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDDailyMenusResponse, error)

	// GetUsersParamUserIDDailyMenusParamDailyMenuIDWithResponse request
	GetUsersParamUserIDDailyMenusParamDailyMenuIDWithResponse(ctx context.Context, paramUserID ParamUserID, paramDailyMenuID ParamDailyMenuID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDDailyMenusParamDailyMenuIDResponse, error)

	// GetUsersParamUserIDMenusWithResponse request
	GetUsersParamUserIDMenusWithResponse(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDMenusResponse, error)

	// GetUsersParamUserIDMenusParamMenuIDWithResponse request
	GetUsersParamUserIDMenusParamMenuIDWithResponse(ctx context.Context, paramUserID ParamUserID, paramMenuID ParamMenuID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDMenusParamMenuIDResponse, error)

	// GetUsersParamUserIDRecipesWithResponse request
	GetUsersParamUserIDRecipesWithResponse(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDRecipesResponse, error)

	// PostUsersParamUserIDRecipesWithBodyWithResponse request with any body
	PostUsersParamUserIDRecipesWithBodyWithResponse(ctx context.Context, paramUserID ParamUserID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersParamUserIDRecipesResponse, error)

	PostUsersParamUserIDRecipesWithResponse(ctx context.Context, paramUserID ParamUserID, body PostUsersParamUserIDRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersParamUserIDRecipesResponse, error)

	// GetUsersParamUserIDRecipesParamRecipeIDWithResponse request
	GetUsersParamUserIDRecipesParamRecipeIDWithResponse(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDRecipesParamRecipeIDResponse, error)

	// PatchUsersParamUserIDRecipesParamRecipeIDWithBodyWithResponse request with any body
	PatchUsersParamUserIDRecipesParamRecipeIDWithBodyWithResponse(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersParamUserIDRecipesParamRecipeIDResponse, error)

	PatchUsersParamUserIDRecipesParamRecipeIDWithResponse(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, body PatchUsersParamUserIDRecipesParamRecipeIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersParamUserIDRecipesParamRecipeIDResponse, error)
}

type GetAdminUsersResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Users
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetAdminUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]Product
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *ProductID
	ApplicationproblemJSON409 *struct {
		Uuid *ID `json:"uuid,omitempty"`

		// Detail A human-readable explanation specific to this occurrence of the problem
		Detail *string `json:"detail,omitempty"`

		// Status The HTTP status code generated by the origin server for this occurrence of the problem
		Status int `json:"status"`

		// Title A short, human-readable summary of the problem type
		Title string `json:"title"`
	}
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PostProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsParamProductIDResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Product
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetProductsParamProductIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsParamProductIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsParamProductIDEquivalentsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]EquivalentProduct
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetProductsParamProductIDEquivalentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsParamProductIDEquivalentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersParamUserIDResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *User
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersParamUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersParamUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersParamUserIDDailyMenusResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]DailyMenu
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersParamUserIDDailyMenusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersParamUserIDDailyMenusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersParamUserIDDailyMenusParamDailyMenuIDResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DailyMenuDetailed
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersParamUserIDDailyMenusParamDailyMenuIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersParamUserIDDailyMenusParamDailyMenuIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersParamUserIDMenusResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]Menu
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersParamUserIDMenusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersParamUserIDMenusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersParamUserIDMenusParamMenuIDResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *MenuDetailed
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersParamUserIDMenusParamMenuIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersParamUserIDMenusParamMenuIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersParamUserIDRecipesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]Recipe
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersParamUserIDRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersParamUserIDRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersParamUserIDRecipesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *RecipeID
	ApplicationproblemJSON409 *struct {
		Uuid *ID `json:"uuid,omitempty"`

		// Detail A human-readable explanation specific to this occurrence of the problem
		Detail *string `json:"detail,omitempty"`

		// Status The HTTP status code generated by the origin server for this occurrence of the problem
		Status int `json:"status"`

		// Title A short, human-readable summary of the problem type
		Title string `json:"title"`
	}
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PostUsersParamUserIDRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersParamUserIDRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersParamUserIDRecipesParamRecipeIDResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Recipe
	ApplicationproblemJSON400 *Error
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersParamUserIDRecipesParamRecipeIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersParamUserIDRecipesParamRecipeIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUsersParamUserIDRecipesParamRecipeIDResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PatchUsersParamUserIDRecipesParamRecipeIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUsersParamUserIDRecipesParamRecipeIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdminUsersWithResponse request returning *GetAdminUsersResponse
func (c *ClientWithResponses) GetAdminUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminUsersResponse, error) {
	rsp, err := c.GetAdminUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminUsersResponse(rsp)
}

// GetProductsWithResponse request returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// PostProductsWithBodyWithResponse request with arbitrary body returning *PostProductsResponse
func (c *ClientWithResponses) PostProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsResponse, error) {
	rsp, err := c.PostProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsResponse(rsp)
}

func (c *ClientWithResponses) PostProductsWithResponse(ctx context.Context, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsResponse, error) {
	rsp, err := c.PostProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsResponse(rsp)
}

// GetProductsParamProductIDWithResponse request returning *GetProductsParamProductIDResponse
func (c *ClientWithResponses) GetProductsParamProductIDWithResponse(ctx context.Context, paramProductID ParamProductID, reqEditors ...RequestEditorFn) (*GetProductsParamProductIDResponse, error) {
	rsp, err := c.GetProductsParamProductID(ctx, paramProductID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsParamProductIDResponse(rsp)
}

// GetProductsParamProductIDEquivalentsWithResponse request returning *GetProductsParamProductIDEquivalentsResponse
func (c *ClientWithResponses) GetProductsParamProductIDEquivalentsWithResponse(ctx context.Context, paramProductID ParamProductID, reqEditors ...RequestEditorFn) (*GetProductsParamProductIDEquivalentsResponse, error) {
	rsp, err := c.GetProductsParamProductIDEquivalents(ctx, paramProductID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsParamProductIDEquivalentsResponse(rsp)
}

// GetUsersParamUserIDWithResponse request returning *GetUsersParamUserIDResponse
func (c *ClientWithResponses) GetUsersParamUserIDWithResponse(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDResponse, error) {
	rsp, err := c.GetUsersParamUserID(ctx, paramUserID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersParamUserIDResponse(rsp)
}

// GetUsersParamUserIDDailyMenusWithResponse request returning *GetUsersParamUserIDDailyMenusResponse
func (c *ClientWithResponses) GetUsersParamUserIDDailyMenusWithResponse(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDDailyMenusResponse, error) {
	rsp, err := c.GetUsersParamUserIDDailyMenus(ctx, paramUserID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersParamUserIDDailyMenusResponse(rsp)
}

// GetUsersParamUserIDDailyMenusParamDailyMenuIDWithResponse request returning *GetUsersParamUserIDDailyMenusParamDailyMenuIDResponse
func (c *ClientWithResponses) GetUsersParamUserIDDailyMenusParamDailyMenuIDWithResponse(ctx context.Context, paramUserID ParamUserID, paramDailyMenuID ParamDailyMenuID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDDailyMenusParamDailyMenuIDResponse, error) {
	rsp, err := c.GetUsersParamUserIDDailyMenusParamDailyMenuID(ctx, paramUserID, paramDailyMenuID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersParamUserIDDailyMenusParamDailyMenuIDResponse(rsp)
}

// GetUsersParamUserIDMenusWithResponse request returning *GetUsersParamUserIDMenusResponse
func (c *ClientWithResponses) GetUsersParamUserIDMenusWithResponse(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDMenusResponse, error) {
	rsp, err := c.GetUsersParamUserIDMenus(ctx, paramUserID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersParamUserIDMenusResponse(rsp)
}

// GetUsersParamUserIDMenusParamMenuIDWithResponse request returning *GetUsersParamUserIDMenusParamMenuIDResponse
func (c *ClientWithResponses) GetUsersParamUserIDMenusParamMenuIDWithResponse(ctx context.Context, paramUserID ParamUserID, paramMenuID ParamMenuID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDMenusParamMenuIDResponse, error) {
	rsp, err := c.GetUsersParamUserIDMenusParamMenuID(ctx, paramUserID, paramMenuID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersParamUserIDMenusParamMenuIDResponse(rsp)
}

// GetUsersParamUserIDRecipesWithResponse request returning *GetUsersParamUserIDRecipesResponse
func (c *ClientWithResponses) GetUsersParamUserIDRecipesWithResponse(ctx context.Context, paramUserID ParamUserID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDRecipesResponse, error) {
	rsp, err := c.GetUsersParamUserIDRecipes(ctx, paramUserID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersParamUserIDRecipesResponse(rsp)
}

// PostUsersParamUserIDRecipesWithBodyWithResponse request with arbitrary body returning *PostUsersParamUserIDRecipesResponse
func (c *ClientWithResponses) PostUsersParamUserIDRecipesWithBodyWithResponse(ctx context.Context, paramUserID ParamUserID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersParamUserIDRecipesResponse, error) {
	rsp, err := c.PostUsersParamUserIDRecipesWithBody(ctx, paramUserID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersParamUserIDRecipesResponse(rsp)
}

func (c *ClientWithResponses) PostUsersParamUserIDRecipesWithResponse(ctx context.Context, paramUserID ParamUserID, body PostUsersParamUserIDRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersParamUserIDRecipesResponse, error) {
	rsp, err := c.PostUsersParamUserIDRecipes(ctx, paramUserID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersParamUserIDRecipesResponse(rsp)
}

// GetUsersParamUserIDRecipesParamRecipeIDWithResponse request returning *GetUsersParamUserIDRecipesParamRecipeIDResponse
func (c *ClientWithResponses) GetUsersParamUserIDRecipesParamRecipeIDWithResponse(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, reqEditors ...RequestEditorFn) (*GetUsersParamUserIDRecipesParamRecipeIDResponse, error) {
	rsp, err := c.GetUsersParamUserIDRecipesParamRecipeID(ctx, paramUserID, paramRecipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersParamUserIDRecipesParamRecipeIDResponse(rsp)
}

// PatchUsersParamUserIDRecipesParamRecipeIDWithBodyWithResponse request with arbitrary body returning *PatchUsersParamUserIDRecipesParamRecipeIDResponse
func (c *ClientWithResponses) PatchUsersParamUserIDRecipesParamRecipeIDWithBodyWithResponse(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersParamUserIDRecipesParamRecipeIDResponse, error) {
	rsp, err := c.PatchUsersParamUserIDRecipesParamRecipeIDWithBody(ctx, paramUserID, paramRecipeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersParamUserIDRecipesParamRecipeIDResponse(rsp)
}

func (c *ClientWithResponses) PatchUsersParamUserIDRecipesParamRecipeIDWithResponse(ctx context.Context, paramUserID ParamUserID, paramRecipeID ParamRecipeID, body PatchUsersParamUserIDRecipesParamRecipeIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersParamUserIDRecipesParamRecipeIDResponse, error) {
	rsp, err := c.PatchUsersParamUserIDRecipesParamRecipeID(ctx, paramUserID, paramRecipeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersParamUserIDRecipesParamRecipeIDResponse(rsp)
}

// ParseGetAdminUsersResponse parses an HTTP response from a GetAdminUsersWithResponse call
func ParseGetAdminUsersResponse(rsp *http.Response) (*GetAdminUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Users
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostProductsResponse parses an HTTP response from a PostProductsWithResponse call
func ParsePostProductsResponse(rsp *http.Response) (*PostProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Uuid *ID `json:"uuid,omitempty"`

			// Detail A human-readable explanation specific to this occurrence of the problem
			Detail *string `json:"detail,omitempty"`

			// Status The HTTP status code generated by the origin server for this occurrence of the problem
			Status int `json:"status"`

			// Title A short, human-readable summary of the problem type
			Title string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetProductsParamProductIDResponse parses an HTTP response from a GetProductsParamProductIDWithResponse call
func ParseGetProductsParamProductIDResponse(rsp *http.Response) (*GetProductsParamProductIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsParamProductIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Product
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetProductsParamProductIDEquivalentsResponse parses an HTTP response from a GetProductsParamProductIDEquivalentsWithResponse call
func ParseGetProductsParamProductIDEquivalentsResponse(rsp *http.Response) (*GetProductsParamProductIDEquivalentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsParamProductIDEquivalentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EquivalentProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersParamUserIDResponse parses an HTTP response from a GetUsersParamUserIDWithResponse call
func ParseGetUsersParamUserIDResponse(rsp *http.Response) (*GetUsersParamUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersParamUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersParamUserIDDailyMenusResponse parses an HTTP response from a GetUsersParamUserIDDailyMenusWithResponse call
func ParseGetUsersParamUserIDDailyMenusResponse(rsp *http.Response) (*GetUsersParamUserIDDailyMenusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersParamUserIDDailyMenusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DailyMenu
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersParamUserIDDailyMenusParamDailyMenuIDResponse parses an HTTP response from a GetUsersParamUserIDDailyMenusParamDailyMenuIDWithResponse call
func ParseGetUsersParamUserIDDailyMenusParamDailyMenuIDResponse(rsp *http.Response) (*GetUsersParamUserIDDailyMenusParamDailyMenuIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersParamUserIDDailyMenusParamDailyMenuIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DailyMenuDetailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersParamUserIDMenusResponse parses an HTTP response from a GetUsersParamUserIDMenusWithResponse call
func ParseGetUsersParamUserIDMenusResponse(rsp *http.Response) (*GetUsersParamUserIDMenusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersParamUserIDMenusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Menu
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersParamUserIDMenusParamMenuIDResponse parses an HTTP response from a GetUsersParamUserIDMenusParamMenuIDWithResponse call
func ParseGetUsersParamUserIDMenusParamMenuIDResponse(rsp *http.Response) (*GetUsersParamUserIDMenusParamMenuIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersParamUserIDMenusParamMenuIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MenuDetailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersParamUserIDRecipesResponse parses an HTTP response from a GetUsersParamUserIDRecipesWithResponse call
func ParseGetUsersParamUserIDRecipesResponse(rsp *http.Response) (*GetUsersParamUserIDRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersParamUserIDRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePostUsersParamUserIDRecipesResponse parses an HTTP response from a PostUsersParamUserIDRecipesWithResponse call
func ParsePostUsersParamUserIDRecipesResponse(rsp *http.Response) (*PostUsersParamUserIDRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersParamUserIDRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RecipeID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Uuid *ID `json:"uuid,omitempty"`

			// Detail A human-readable explanation specific to this occurrence of the problem
			Detail *string `json:"detail,omitempty"`

			// Status The HTTP status code generated by the origin server for this occurrence of the problem
			Status int `json:"status"`

			// Title A short, human-readable summary of the problem type
			Title string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersParamUserIDRecipesParamRecipeIDResponse parses an HTTP response from a GetUsersParamUserIDRecipesParamRecipeIDWithResponse call
func ParseGetUsersParamUserIDRecipesParamRecipeIDResponse(rsp *http.Response) (*GetUsersParamUserIDRecipesParamRecipeIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersParamUserIDRecipesParamRecipeIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePatchUsersParamUserIDRecipesParamRecipeIDResponse parses an HTTP response from a PatchUsersParamUserIDRecipesParamRecipeIDWithResponse call
func ParsePatchUsersParamUserIDRecipesParamRecipeIDResponse(rsp *http.Response) (*PatchUsersParamUserIDRecipesParamRecipeIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUsersParamUserIDRecipesParamRecipeIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
